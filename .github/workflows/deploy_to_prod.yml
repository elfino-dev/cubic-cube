name: Deploy App

on:
  push:
    branches:
      - master  # Trigger deploy when pushing to the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Add server's SSH key to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
      
      - name: Create .env file
        run: |
          echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> .env
          echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
          echo "SMTP_SECURE=${{ secrets.SMTP_SECURE }}" >> .env
          echo "SMTP_USER=${{ secrets.SMTP_USER }}" >> .env
          echo "SMTP_PASS=${{ secrets.SMTP_PASS }}" >> .env
          echo "SMTP_FROM=${{ secrets.SMTP_FROM }}" >> .env
          echo "SMTP_TO=${{ secrets.SMTP_TO }}" >> .env
          echo "RECAPTCHA_SECRET_KEY=${{ secrets.RECAPTCHA_SECRET_KEY }}" >> .env
          echo "RECAPTCHA_SCORE_THRESHOLD=${{ secrets.RECAPTCHA_SCORE_THRESHOLD }}" >> .env
          echo "VITE_RECAPTCHA_SITE_KEY=${{ secrets.VITE_RECAPTCHA_SITE_KEY }}" >> .env

      - name: Upload files via SCP
        run: |
          # Explicitly enable password authentication for SCP
          export SSHPASS="${{ secrets.SERVER_PASSWORD }}"
          sshpass -e scp -r ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/var/www/elfino/cubic-cube/

      # SSH into your server to build and run the Docker container
      - name: Build and Deploy on Server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            IMAGE_NAME="cubic-cube"
            cd /var/www/elfino/$IMAGE_NAME/
            TAG=${{ github.run_id }}
            docker build -t $IMAGE_NAME:$TAG .
            docker stop $IMAGE_NAME || true
            docker rm $IMAGE_NAME || true
            docker run -d --env-file .env --name $IMAGE_NAME -p ${{ secrets.DOCKER_PORT_FROM }}:${{ secrets.DOCKER_PORT_TO }} $IMAGE_NAME:$TAG
            docker images $IMAGE_NAME --format "{{.ID}}" | tail -n +2 | xargs -r docker rmi
